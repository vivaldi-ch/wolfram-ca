{"version":3,"sources":["webpack:///./src/components/wolfram-array.js"],"names":["WolframArray","props","_this","value","_React$Component","call","this","isNumberValid","state","componentDidMount","updateCanvas","_this$props","width","height","ctx","canvas","getContext","getWolframCAArray","forEach","object","index","o","objectIndex","fillRect","render","_this2","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","styles","table","ref","notFound","React","Component","propTypes","PropTypes","number","isRequired"],"mappings":"gLASMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAGTC,GAFRD,EAAAE,EAAAC,KAAAC,KAAML,IAANK,MAEuBL,MAAfE,MACFI,EAAgBJ,EAAQ,GAAKA,EAAQ,IAJ1B,OAMjBD,EAAKM,MAAQ,CACXD,iBAPeL,sCAWnBO,kBAAA,WACEH,KAAKI,kBAGPA,aAAA,WAAe,IAAAC,EACoBL,KAAKL,MAA9BE,EADKQ,EACLR,MAAOS,EADFD,EACEC,MAAOC,EADTF,EACSE,OAGtB,GAF0BP,KAAKE,MAAvBD,cAER,CAEA,IAAMO,EAAMR,KAAKS,OAAOC,WAAW,MAEnCC,YAAkBd,EAAOS,EAAOC,GAAQK,QAAQ,SAACC,EAAQC,GACvDD,EAAOD,QAAQ,SAACG,EAAGC,GACP,IAAND,GACFP,EAAIS,SA7BI,GA6BKD,EA7BL,GA6B8BF,EA7B9B,eAmChBI,OAAA,WAAS,IAAAC,EAAAnB,KAiBP,OAhB0BA,KAAKE,MAAvBD,cAGNmB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOC,OACrBL,EAAAC,EAAAC,cAAA,UACEI,IAAK,SAACjB,GACJU,EAAKV,OAASA,GAEhBH,MAAO,IACPC,OAAQ,QAIZa,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOG,UAAtB,uBA/CqBC,IAAMC,WAsDjCnC,EAAaoC,UAAY,CACvBjC,MAAOkC,IAAUC,OAAOC,WACxB3B,MAAOyB,IAAUC,OAAOC,WACxB1B,OAAQwB,IAAUC,OAAOC,YAGZvC","file":"9-cfc77482fb9878ecefdd.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getWolframCAArray } from '../../utils/wolfram';\n\nimport styles from './wolfram-ca.module.css';\n\nconst CELL_SIDE = 15;\n\nclass WolframArray extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { value } = this.props;\n    const isNumberValid = value > 0 && value < 256;\n\n    this.state = {\n      isNumberValid,\n    };\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const { value, width, height } = this.props;\n    const { isNumberValid } = this.state;\n\n    if (!isNumberValid) return;\n\n    const ctx = this.canvas.getContext('2d');\n\n    getWolframCAArray(value, width, height).forEach((object, index) => {\n      object.forEach((o, objectIndex) => {\n        if (o === 1) {\n          ctx.fillRect(objectIndex * CELL_SIDE, index * CELL_SIDE, CELL_SIDE, CELL_SIDE);\n        }\n      });\n    });\n  }\n\n  render() {\n    const { isNumberValid } = this.state;\n\n    const wolframHTML = isNumberValid ? (\n      <div className={styles.table}>\n        <canvas\n          ref={(canvas) => {\n            this.canvas = canvas;\n          }}\n          width={765}\n          height={7500}\n        />\n      </div>\n    ) : (\n      <h4 className={styles.notFound}>Invalid number.</h4>\n    );\n\n    return wolframHTML;\n  }\n}\n\nWolframArray.propTypes = {\n  value: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default WolframArray;\n"],"sourceRoot":""}